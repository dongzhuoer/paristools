// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_paristools_RCPPEXPORTS_H_GEN_
#define RCPP_paristools_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace paristools {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("paristools", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("paristools", "_paristools_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in paristools");
            }
        }
    }

    inline List test_parse_CIGAR(String chrom, unsigned flag, unsigned long pos, String CIGAR, unsigned long SEQ_len) {
        typedef SEXP(*Ptr_test_parse_CIGAR)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_test_parse_CIGAR p_test_parse_CIGAR = NULL;
        if (p_test_parse_CIGAR == NULL) {
            validateSignature("List(*test_parse_CIGAR)(String,unsigned,unsigned long,String,unsigned long)");
            p_test_parse_CIGAR = (Ptr_test_parse_CIGAR)R_GetCCallable("paristools", "_paristools_test_parse_CIGAR");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_parse_CIGAR(Shield<SEXP>(Rcpp::wrap(chrom)), Shield<SEXP>(Rcpp::wrap(flag)), Shield<SEXP>(Rcpp::wrap(pos)), Shield<SEXP>(Rcpp::wrap(CIGAR)), Shield<SEXP>(Rcpp::wrap(SEQ_len)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List sam_to_locs(DataFrame sam) {
        typedef SEXP(*Ptr_sam_to_locs)(SEXP);
        static Ptr_sam_to_locs p_sam_to_locs = NULL;
        if (p_sam_to_locs == NULL) {
            validateSignature("List(*sam_to_locs)(DataFrame)");
            p_sam_to_locs = (Ptr_sam_to_locs)R_GetCCallable("paristools", "_paristools_sam_to_locs");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_sam_to_locs(Shield<SEXP>(Rcpp::wrap(sam)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline List test2(const DataFrame& df) {
        typedef SEXP(*Ptr_test2)(SEXP);
        static Ptr_test2 p_test2 = NULL;
        if (p_test2 == NULL) {
            validateSignature("List(*test2)(const DataFrame&)");
            p_test2 = (Ptr_test2)R_GetCCallable("paristools", "_paristools_test2");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test2(Shield<SEXP>(Rcpp::wrap(df)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline std::string get_strand(const unsigned flag) {
        typedef SEXP(*Ptr_get_strand)(SEXP);
        static Ptr_get_strand p_get_strand = NULL;
        if (p_get_strand == NULL) {
            validateSignature("std::string(*get_strand)(const unsigned)");
            p_get_strand = (Ptr_get_strand)R_GetCCallable("paristools", "_paristools_get_strand");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_get_strand(Shield<SEXP>(Rcpp::wrap(flag)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::string >(rcpp_result_gen);
    }

    inline List test_as_locs() {
        typedef SEXP(*Ptr_test_as_locs)();
        static Ptr_test_as_locs p_test_as_locs = NULL;
        if (p_test_as_locs == NULL) {
            validateSignature("List(*test_as_locs)()");
            p_test_as_locs = (Ptr_test_as_locs)R_GetCCallable("paristools", "_paristools_test_as_locs");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_test_as_locs();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<List >(rcpp_result_gen);
    }

    inline int cpp_version() {
        typedef SEXP(*Ptr_cpp_version)();
        static Ptr_cpp_version p_cpp_version = NULL;
        if (p_cpp_version == NULL) {
            validateSignature("int(*cpp_version)()");
            p_cpp_version = (Ptr_cpp_version)R_GetCCallable("paristools", "_paristools_cpp_version");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_version();
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

}

#endif // RCPP_paristools_RCPPEXPORTS_H_GEN_
